#! /bin/python3
# Author: Rodrigo Valle
#
# TODO:
# - test this thing out
#
# NOTES:
# - for use with netctl
# - only supports open networks (for now)
import sys, os, io

profile_dir   = "/etc/netctl"
net_interface = "wlp2s0"


def chk_root():
    if os.geteuid() != 0:
        print("This script must be run as root.", file=sys.stderr)
        sys.exit(1)


def chk_args():
    help_opt = ["-h", "--help"]
    if len(sys.argv) != 3 or sys.argv[1] in help_opt:
        print("Usage: " + sys.argv[0] + " [-h, --help] <ssid> <profile_name>", file=sys.stderr)
        sys.exit(1)


def chk_n_exist(path):
    if os.path.isfile(path):
        print("A profile with that name already exits.")
        sys.exit(1)


def prompt_net_info():
    valid = { 'y':   True,
              'yes': True,
              'n':   False,
              'no':  False  }

    ans = input("Is this a hidden SSID? [y/N] ").lower()
    hidden = False

    while True:
        if ans in valid:
            hidden = valid[ans]
            break
        elif ans == "":
            break
        else:
            ans = input("Please type 'y' or 'n'")

    description = input("Enter a short description: ")
    return (hidden, description)


def gen_config(ssid, desc, hidden, interface, path):
    conf = [
        "# generated by ~/scripts/add_wifi\n\n",
        "Description='{}'\n".format(desc.replace("'", "")),
        "Interface='{}'\n".format(interface.replace("'", "")),
        "Connection=wireless\n\n",
        "Security=none\n",
        "IP=dhcp\n\n",
        "ESSID='{}'\n".format(ssid))
    ]
    if hidden:
        conf.append("Hidden=yes\n")

    try:
        f = open(path, mode='w')
        f.writelines(conf)
    except IOError:
        print("couldn't create configuration file", file=sys.stderr)
        sys.exit(1)
    finally:
        f.close()


def main():
    chk_args()
    chk_root()

    full_path = profile_dir + '/' + sys.argv[2]
    chk_n_exist(full_path)

    net_hidden, net_desc = prompt_net_info()
    gen_config(sys.argv[1], net_desc, net_hidden, net_interface, full_path)

if __name__ == "__main__":
    main()
